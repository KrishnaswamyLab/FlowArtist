# AUTOGENERATED! DO NOT EDIT! File to edit: 05c01 Results on Bone Marrow.ipynb (unless otherwise specified).

__all__ = ['parameters_list_from_dict', 'counter', 'parameters_list_from_dict', 'counter']

# Cell
import json
import os

counter = 0
def parameters_list_from_dict(parameters_dict, outfile, filetype = "dsq", kernel_name = 'FREDkernel_jupyter', preamble = 'module load miniconda; conda activate FREDkernel;'):
    ''' Given a dictionary whose values are each a list of possible values, creates a json file with one dictionary for every possible combination of values.
        If filetype is `dsq`, then makes a txt file with each line corresponding to a job, ending in `papermill ....`.
    '''
    if filetype=='json':
        with open(outfile, 'a') as f:
                    f.write('{')
    keys = list(parameters_dict.keys())
    run_num = 0
    def add_key_to_dict(little_dict, key_num):
        if key_num == len(keys):
            global counter
            counter += 1
            # write little dict to outfile
            descriptor = f"run{counter}" + little_dict.__str__().replace(little_dict['notebook'],'').replace(' ','').replace("'","").replace(':','-').replace('{','').replace('}','').replace('.','').replace(',','_').replace('notebook-','')
            little_dict['output_label'] = descriptor
            with open(outfile, 'a') as f:
                if filetype == "json":
                    f.write(f'\n"{descriptor}":')
                    json.dump(little_dict,f,indent=4)
                    f.write(',')
                elif filetype == "dsq":
                    in_notebook = little_dict['notebook']
                    directory = 'papermilled/'+in_notebook.replace('.ipynb','')
                    if not os.path.exists(directory):
                        os.makedirs(directory)
                    out_notebook =  directory + "/" + descriptor + '.ipynb'
                    command = f'{preamble} papermill "{in_notebook}" "{out_notebook}" -k {kernel_name} -y "{little_dict.__str__()}"'
                    f.write(f"{command}\n")

        else:
            current_key = keys[key_num]
            for val in parameters_dict[current_key]:
                little_dict[current_key] = val
                add_key_to_dict(little_dict.copy(), key_num + 1)
    little_dict = {}
    add_key_to_dict(little_dict, 0)
    # delete last trailing comma, as json doesn't like this
    if filetype == 'json':
        with open(outfile, 'rb+') as f:
            f.seek(-1, os.SEEK_END)
            f.truncate()
        with open(outfile, 'a') as f:
            f.write('}')
    print(f"Created {counter} test scenarios.")


# Cell
import json
import os

counter = 0
def parameters_list_from_dict(parameters_dict, outfile):
    ''' Given a dictionary whose values are each a list of possible values, creates a json file with one dictionary for every possible combination of values. '''
    with open(outfile, 'a') as f:
                f.write('{')
    keys = list(parameters_dict.keys())
    run_num = 0
    def add_key_to_dict(little_dict, key_num):
        if key_num == len(keys):
            global counter
            counter += 1
            # write little dict to outfile
            descriptor = f'run_{counter}'
            little_dict['output_label'] = descriptor
            with open(outfile, 'a') as f:
                f.write(f'\n"{descriptor}":')
                json.dump(little_dict,f,indent=4)
                f.write(',')
        else:
            current_key = keys[key_num]
            for val in parameters_dict[current_key]:
                little_dict[current_key] = val
                add_key_to_dict(little_dict.copy(), key_num + 1)
    little_dict = {}
    add_key_to_dict(little_dict, 0)
    # delete last trailing comma, as json doesn't like this
    with open(outfile, 'rb+') as f:
        f.seek(-1, os.SEEK_END)
        f.truncate()
    with open(outfile, 'a') as f:
        f.write('}')
    print(f"Created {counter} test scenarios.")
